Program for stack using array 

#include <iostream>

using namespace std;

#define MAX 100

class Stack {

int arr[MAX], top;

public:

Stack() : top(-1) {}

void push(int value) {

if (top >= MAX - 1) {

cout << "Stack Overflow!" << endl;

} else {

arr[++top] = value;

cout << value << " pushed to stack." << endl;

}

}

void pop() {

if (top < 0) {

cout << "Stack Underflow!" << endl;

} else {

cout << arr[top--] << " popped from stack." << endl;

}

}

void display() {

if (top < 0) {

cout << "Stack is empty." << endl;

} else {

cout << "Stack elements: ";

for (int i = top; i >= 0; i—)

cout << arr[i] << " ";

cout << endl;

}

}

};

int main() {

Stack s;

int choice, value;

do {

cout << "\n1. Push\n2. Pop\n3. Display\n4. Exit\n";

cout << "Enter your choice: ";

cin >> choice;

switch (choice) {

case 1:

cout << "Enter value: ";

cin >> value;

s.push(value);

break;

case 2:

s.pop();

break;

case 3:

s.display();

break;

case 4:

cout << "Exiting..." << endl;

break;

default:

cout << "Invalid choice!" << endl;

}

} while (choice != 4);

return 0;

}

Program for queue using array

#include <iostream>

using namespace std;

#define MAX 100

class Queue {

 int arr[MAX], front, rear;

public:

 Queue() : front(-1), rear(-1) {}

 void enqueue(int value) {

 if (rear >= MAX - 1) {

 cout << "Queue Overflow!" << endl;

 } else {

 if (front == -1) front = 0;

 arr[++rear] = value;

 cout << value << " enqueued." << endl;

 }

 }

 void dequeue() {

 if (front == -1 || front > rear) {

 cout << "Queue Underflow!" << endl;

 } else {

 cout << arr[front++] << " dequeued." << endl;

 }

 }

 void display() {

 if (front == -1 || front > rear) {

 cout << "Queue is empty." << endl;

 } else {

 cout << "Queue elements: ";

 for (int i = front; i <= rear; i++)

 cout << arr[i] << " ";

 cout << endl;

 }

 }

};

int main() {

 Queue q;

 int choice, value;

 do {

 cout << "\n1. Enqueue\n2. Dequeue\n3. Display\n4. Exit\n”;

cout << "Enter your choice: ";

 cin >> choice;

 switch (choice) {

 case 1:

 cout << "Enter value: ";

 cin >> value;

 q.enqueue(value);

 break;

 case 2:

 q.dequeue();

 break;

 case 3:

 q.display();

 break;

 case 4:

 cout << "Exiting..." << endl;

 break;

 default:

 cout << "Invalid choice!" << endl;

 }

 } while (choice != 4);

 return 0; }

write a simple short code to develop a circular queue

#include <iostream>

using namespace std;

class CircularQueue {

 int front, rear, size;

 int *queue;
